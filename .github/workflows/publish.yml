name: Publish

# Controls when the workflow will run
on:
  push:
    tags:
      - v* # publish only on version tags
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  FLEDGE_IMAGE_NAME: 'fledgepower/fledge'
  FLEDGE_GUI_IMAGE_NAME: 'fledgepower/fledge-gui'
  #IMAGE_TAG: '1.0.0-amd64'
  #IMAGE_TAG: 'latest'
  IMAGE_TAG: ${{ github.ref_name }}
  TASE2_REPO_ACCESS_TOKEN: ${{ secrets.TASE2_REPO_ACCESS_TOKEN }}
  LATEST_TAG: "${{ github.event_name == 'workflow_dispatch' && 'latest-dev' || 'latest' }}"

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Download and install Docker
      - name: Download and install Docker
        run: |
          sudo apt-get update
          sudo apt-get install \
                  ca-certificates \
                  curl \
                  gnupg \
                  lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io

      # Download and install yq yaml processor
      - name: Download and install yq
        env:
          YQ_REPO: "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
        run: |
          sudo wget -qO /usr/local/bin/yq ${{ env.YQ_REPO }}
          sudo chmod a+x /usr/local/bin/yq

      # Download fledgepower deployment
      - name: Download fledgepower deployment
        env:
          FP_DEPLOY_REPO: "https://github.com/fledge-power/fledgepower-deployment.git"
        run: |
          git clone ${{ env.FP_DEPLOY_REPO }} --branch ${{ github.ref_name }} --single-branch

      # Log in to the Container registry ghcr.io
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      # Build image
      - name: Build images
        run: |
          cd ./fledgepower-deployment/all-plugins-ubuntu2404/fledge/
          sudo chmod +x ./buildContainerfile.sh
          ./buildContainerfile.sh
          sudo -E docker build -f fledge.dockerfile -t ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_IMAGE_NAME }}:${{ env.IMAGE_TAG }} . --label ${{ github.ref }}
          cd ../fledge-gui
          sudo -E docker build -f fledge-gui.dockerfile -t ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_GUI_IMAGE_NAME }}:${{ env.IMAGE_TAG }} . --label ${{ github.ref }}

      # Run Snyk to check Docker image for vulnerabilities
      - name: Snyk scan
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          args: --sarif-file-output=snyk.sarif
          
      # Tag image with latest image
      - name: Tag image
        run: |
           sudo -E docker tag ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_IMAGE_NAME }}:${{ env.LATEST_TAG }}
           sudo -E docker tag ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_GUI_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_GUI_IMAGE_NAME }}:${{ env.LATEST_TAG }}

      # Replace security-severity undefined for license-related findings
      - name: Replace security-severity undefined for license-related findings
        run: |
          sed -i 's/"security-severity": "undefined"/"security-severity": "0"/g' snyk.sarif
          sed -i 's/"security-severity": "null"/"security-severity": "0"/g' snyk.sarif
          cat snyk.sarif

      # Upload result to GitHub Code Scanning
      - name: Snyk results upload
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      # Push to ghcr.io (Github Image Registry)
      - name: Push images
        run: |
          sudo -E docker push ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          sudo -E docker push ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_IMAGE_NAME }}:${{ env.LATEST_TAG }}
          sudo -E docker push ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_GUI_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          sudo -E docker push ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ env.FLEDGE_GUI_IMAGE_NAME }}:${{ env.LATEST_TAG }}
